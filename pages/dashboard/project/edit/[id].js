import EditProjectComponent from "@/components/DashboardComp/EditProjectComp";
import {
  ALL_CATEGORIES_NAME,
  ALL_TAGS_NAME,
  ALL_USERS_NAME,
  GET_PROJECT_BY_ID,
} from "@/services/graphql/queries";
import { currentUserData, getCookie } from "@/services/utils/cookieExtract";
import client from "apollo-client";
import Head from "next/head";

export default function EditProject({
  projectData,
  tags,
  categories,
  clients,
  accessToken,
  visitor,
}) {
  return (
    <div className="page_wrapper">
      <Head>
        <title>Portfolio - Edit Project</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <EditProjectComponent
          projectData={projectData}
          tags={tags}
          categories={categories}
          clients={clients}
          accessToken={accessToken}
          user={visitor}
        />
      </main>
    </div>
  );
}

// to get new added categories and tags from the database we should use getServerSideProps
export async function getServerSideProps({ params, req, res }) {
  const { cookie } = req.headers;
  const accessToken = getCookie("portfolio_2_0", cookie);
  const visitor = currentUserData("portfolio_2_0", cookie);
  // console.log("visitor", visitor);

  // setting private route
  if (!accessToken) {
    res.setHeader("Set-Cookie", "portfolio_2_0=; path=/; max-age=0");
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }
  const { data: tagData } = await client.query({
    query: ALL_TAGS_NAME,
  });

  const { data: categoryData } = await client.query({
    query: ALL_CATEGORIES_NAME,
  });

  const { data: clientData } = await client.query({
    query: ALL_USERS_NAME,
  });

  const { data: projectData } = await client.query({
    query: GET_PROJECT_BY_ID,
    variables: {
      id: params?.id,
    },
  });

  return {
    props: {
      projectData: projectData?.getProject || {},
      tags: tagData?.listTag || [],
      categories: categoryData?.listCategory || [],
      clients: clientData?.listUser || [],
      accessToken: accessToken || "",
      visitor: visitor || null,
    },
  };
}
